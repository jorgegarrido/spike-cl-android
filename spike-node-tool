%% -*- mode: erlang;erlang-indent-level: 4;indent-tabs-mode: nil -*-
%% ex: ft=erlang ts=4 sw=4 et
%% -------------------------------------------------------------------
%%
%%  Spike Client Node Tool 
%%
%%  This escript is intended to create a single interface to manage
%%  calls to erlang live nodes
%%
%% Copyright (c) 2012-2013, Jorge Garrido <zgbjgg@gmail.com>
%% All rights reserved.
%%
%% This Source Code Form is subject to the terms of the Mozilla Public
%% License, v. 2.0. If a copy of the MPL was not distributed with this
%% file, You can obtain one at http://mozilla.org/MPL/2.0/.
%%
%% This script is intended for start an erlang node in detached mode,
%% the erlang node is running in background and others nodes can
%% communicate with this using epmd
%%
%% -------------------------------------------------------------------

%% Main 
main(Args) ->
    %%% Tasks to establish a correct connection with the target node! 
    %% Parse args from command line
    case get_target_args(Args) of
        invalid_node_name                  ->
	    io:format("Invalid node name.\n"),
	    TargetNode = '', RestArgs = [],
	    halt(1);
	{TargetNode, CookieNode, RestArgs} ->
	    %% Build the tmp node name appending suffix (pid)
	    TmpNode = suffix_node(TargetNode, os:getpid()),
	    
	    %% Set up the node
	    {ok, _} = net_kernel:start([TmpNode, longnames]),    
	    erlang:set_cookie(node(), CookieNode),   
	
	    %% Is the target node alive??
	    ok = node_is_alive(TargetNode)
    end,
 
    %% What task?
    case RestArgs of
        [ "rpc", Module, Function, NewArgs ] ->
	    case rpc:call(TargetNode, list_to_atom(Module), list_to_atom(Function),
				string_to_term(NewArgs), 70000) of
	        RPC              -> 
		    io:format("~p\n", [RPC]);
		{badrpc, Reason} ->
		    io:format("Bad RPC stacktrace ~p.\n", [Reason]),
	    	    halt(1)
	    end;
	Unknown				   ->
	    io:format("Option ~p unknown, sorry.\n", [Unknown])
    end,
    net_kernel:stop().
	    
%%
%%  Get target args, parse the args into:
%%
%%	- valid nodename
%%	- cookie 
%%	- args (other options)
%%
get_target_args([ Node, Cookie | RestArgs ]) when is_list(Node) ->
    get_target_args([ nxnode(Node), Cookie | RestArgs ]);
get_target_args([ nxnode | _ ])					->
    invalid_node_name;
get_target_args([ Node, Cookie | RestArgs ]) 			->
    { Node, list_to_atom(Cookie), RestArgs}.

%%
%%  If a node target contains a valid name
%%   
nxnode(Node) ->
    case re:split(Node, "@", [{return, list}]) of
        [ _Name, _Domain ] ->
	    list_to_atom(Node);
	_		   ->
	    nxnode
    end.

%%
%%  Suffix to tmp node
%%
suffix_node(Node, Suffix) when is_atom(Node) ->
    suffix_node(atom_to_list(Node), Suffix);
suffix_node(Node, Suffix) ->
    [ Name, Domain ] = re:split(Node, "@", [{return, list}]),
    list_to_atom(Name ++ "_ziggy_" ++ Suffix ++ "@" ++ Domain).

%%
%%  If target node is accesible via this node
%%
node_is_alive(TargetNode) ->
   case {net_kernel:hidden_connect_node(TargetNode), net_adm:ping(TargetNode)} of
        {true, pong} ->
            ok;
        {_, pang} ->
            io:format("Ziggy: Node ~p not alive.\n", [TargetNode]),
            halt(1)
    end.

%%
%%  String erlang to term erlang
%%
string_to_term(String) ->
    {ok,Tokens,_EndLine} = erl_scan:string(String ++ "."),
    {ok,AbsForm} = erl_parse:parse_exprs(Tokens),
    {value,Value,_Bs} = erl_eval:exprs(AbsForm, erl_eval:new_bindings()),
    Value.
